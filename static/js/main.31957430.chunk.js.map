{"version":3,"sources":["constants.js","components/Cards/index.js","components/Column/index.js","App.js","serviceWorker.js","index.js"],"names":["columnsData","cards","title","color","Cards","index","handleMoveCard","cardIndex","className","onClick","Column","titleColor","addCardToColumn","moveCard","style","backgroundColor","map","card","i","key","userInput","window","prompt","App","useState","columns","setColumns","handleAddCard","input","newColumns","push","currentColumn","nextColumn","cardToRemove","splice","column","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAuBeA,G,MAvBK,CACnB,CACCC,MAAO,CAAC,CAAEC,MAAO,OAAS,CAAEA,MAAO,QACnCA,MAAO,SACPC,MAAO,WAER,CACCF,MAAO,CAAC,CAAEC,MAAO,OAAS,CAAEA,MAAO,QACnCA,MAAO,MACPC,MAAO,WAER,CACCF,MAAO,CAAC,CAAEC,MAAO,OAAS,CAAEA,MAAO,QACnCA,MAAO,SACPC,MAAO,WAER,CACCF,MAAO,CAAC,CAAEC,MAAO,OAAS,CAAEA,MAAO,QACnCA,MAAO,SACPC,MAAO,a,MChBO,SAASC,EAAT,GAA8D,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,eAAgBC,EAAmB,EAAnBA,UAAWL,EAAQ,EAARA,MACnE,OACE,yBAAKM,UAAU,QACF,IAAVH,GACC,yBAAKG,UAAU,QACb,4BAAQC,QAAS,kBAAMH,EAAeD,EAAOA,EAAQ,EAAGE,KAAxD,SAKJ,yBAAKC,UAAU,WAAWN,GACf,IAAVG,GACC,yBAAKG,UAAU,QACb,4BAAQC,QAAS,kBAAMH,EAAeD,EAAOA,EAAQ,EAAGE,KAAxD,U,MCZK,SAASG,EAAT,GAA0E,IAAzDL,EAAwD,EAAxDA,MAAMH,EAAkD,EAAlDA,MAAMS,EAA4C,EAA5CA,WAAWC,EAAiC,EAAjCA,gBAAgBX,EAAiB,EAAjBA,MAAMY,EAAW,EAAXA,SASzE,OACI,yBAAKL,UAAU,oBACX,yBAAKA,UAAU,SAASM,MAAO,CAACC,gBAAgBJ,IAC3CT,GAEL,yBAAKM,UAAU,QAEPP,EAAMe,KAAI,SAACC,EAAKC,GAAN,OACN,kBAAC,EAAD,CACIZ,eAAgBO,EAChBR,MAAOA,EACPc,IAAKD,EACLhB,MAAOe,EAAKf,MACZK,UAAWW,QAO3B,yBAAKV,UAAU,UACX,4BAAQC,QA5BE,WAClB,IAAMW,EAAYC,OAAOC,SACtBF,GACCR,EAAgBQ,EAAUf,KAyBtB,kBCODkB,MApCf,WAAgB,IAAD,EACiBC,mBAASxB,GAD1B,mBACNyB,EADM,KACGC,EADH,KAGPC,EAAgB,SAACC,EAAOvB,GAC5B,IAAIwB,EAAU,YAAOJ,GACrBI,EAAWxB,GAAOJ,MAAM6B,KAAK,CAAE5B,MAAO0B,IACtCF,EAAWG,IAEPvB,EAAiB,SAACyB,EAAeC,EAAYzB,GACjD,IAAMsB,EAAU,YAAOJ,GACjBQ,EAAeJ,EAAWE,GAAe9B,MAAMiC,OACnD3B,EACA,GACA,GACFsB,EAAWG,GAAY/B,MAAM6B,KAAKG,GAClCP,EAAWG,IAGb,OACE,yBAAKrB,UAAU,OACb,yBAAKA,UAAU,qBACZiB,EAAQT,KAAI,SAACmB,EAAQjB,GAAT,OACX,kBAAC,EAAD,CACEL,SAAUP,EACVM,gBAAiBe,EACjBtB,MAAOa,EACPP,WAAYwB,EAAOhC,MACnBF,MAAOkC,EAAOlC,MACdC,MAAOiC,EAAOjC,cCrBNkC,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.31957430.chunk.js","sourcesContent":["const columnsData = [\n\t{\n\t\tcards: [{ title: 'foo' }, { title: 'bar' }],\n\t\ttitle: 'Winnie',\n\t\tcolor: '#8e6e95',\n\t},\n\t{\n\t\tcards: [{ title: 'foo' }, { title: 'bar' }],\n\t\ttitle: 'Bob',\n\t\tcolor: '#39a59c',\n\t},\n\t{\n\t\tcards: [{ title: 'foo' }, { title: 'bar' }],\n\t\ttitle: 'Thomas',\n\t\tcolor: '#344759',\n\t},\n\t{\n\t\tcards: [{ title: 'foo' }, { title: 'bar' }],\n\t\ttitle: 'George',\n\t\tcolor: '#e8741e',\n\t},\n];\n\nexport default columnsData;\n","import React from \"react\";\nimport './index.css'\n\nexport  default function Cards  ({ index, handleMoveCard, cardIndex, title }){\n  return (\n    <div className=\"card\">\n      {index !== 0 && (\n        <div className=\"prev\">\n          <button onClick={() => handleMoveCard(index, index - 1, cardIndex)}>\n            Prev\n          </button>\n        </div>\n      )}\n      <div className=\"content\">{title}</div>\n      {index !== 3 && (\n        <div className=\"next\">\n          <button onClick={() => handleMoveCard(index, index + 1, cardIndex)}>\n            Next\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport Card from '../Cards';\nimport './index.css'\n\nexport default function Column({index,title,titleColor,addCardToColumn,cards,moveCard}) {\n    \n    const handleAddCard = () =>{\n        const userInput = window.prompt();\n        if(userInput){\n            addCardToColumn(userInput,index);\n        }\n    };\n    \n    return (\n        <div className='column-container'>\n            <div className=\"header\" style={{backgroundColor:titleColor}}>\n                {title}\n            </div>\n            <div className=\"list\">\n                {\n                    cards.map((card,i)=> (\n                        <Card\n                            handleMoveCard={moveCard}\n                            index={index}\n                            key={i}\n                            title={card.title}\n                            cardIndex={i}\n                        />\n                    )\n\n                    )\n                }\n            </div>\n            <div className=\"footer\">\n                <button onClick={handleAddCard}>+ Add a card</button>\n            </div>\n        </div>\n    );\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport columnsData from \"./constants\";\nimport Column from \"./components/Column\";\n\nfunction App() {\n  const [columns, setColumns] = useState(columnsData);\n\n  const handleAddCard = (input, index) => {\n    let newColumns = [...columns];\n    newColumns[index].cards.push({ title: input });\n    setColumns(newColumns);\n  };\n  const handleMoveCard = (currentColumn, nextColumn, cardIndex) => {\n    const newColumns = [...columns];\n    const cardToRemove = newColumns[currentColumn].cards.splice(\n      cardIndex,\n      1\n    )[0];\n    newColumns[nextColumn].cards.push(cardToRemove);\n    setColumns(newColumns);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"columns-container\">\n        {columns.map((column, i) => (\n          <Column\n            moveCard={handleMoveCard}\n            addCardToColumn={handleAddCard}\n            index={i}\n            titleColor={column.color}\n            cards={column.cards}\n            title={column.title}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}